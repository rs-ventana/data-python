# -*- coding: utf-8 -*-
"""proyecto_bedu

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/152HhOBhYrBhnm7lQFhVsDOZpmx6riISg

# Importación y manejo de datos

## Importación del conjunto de datos
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
df = pd.read_csv('/content/drive/MyDrive/BEDU/proyecto/data/fao_base.csv')

"""## Exploración inicial"""

# resumen del dataframe
df.info()
df.head(2)

# Revisar columnas y una muestra
print(df.columns.tolist())
df.sample(5)

# tamaño de la base (filas. columnas)
print(f"Tamaño de la base: {df.shape}")
print("\n -----------------------------------------")

# Tipos de datos
print(f"Tipos de datos:\n {df.dtypes}")
print("\n -----------------------------------------")

# Resumen estadístico de columnas numéricas
print(df.describe())
print("\n -----------------------------------------")

"""# Limpieza de datos

## Identificación y tratamiento de valores nulos
"""

# NaN por columna
nan_cols = df.isna().sum()
print(f"Valores vacios por columna:\n {nan_cols}\n" )
## ninguno

# NaN por renglón
# Como la base es muy amplia, exploración del todo
if df.isnull().values.any():
    print("Hay valores nulos en el DataFrame.")
else:
    print("No hay valores nulos en el DataFrame.")

"""## Eliminar duplicados"""

# Renombrar variables usando snake case
df.columns = df.columns.str.lower().str.replace(' ', '_').str.replace('(', '').str.replace(')', '')
df.info()

df_fao = df.copy()

# aplicar minusculas y quitar espacios en blanco a todas las celdas
df_fao = df_fao.applymap(lambda x: x.strip().lower() if isinstance(x, str) else x)

# eliminar columnas
df_fao.drop(columns=['código_del_elemento', 'símbolo', 'nota', 'código_del_nivel_geográfico', 'código_de_la_encuesta', 'código_grupo_de_alimentos', 'código_del_indicador'],  errors='ignore', inplace=True)
df_fao.sample(2)

#valores duplicados
print("Duplicados:", df_fao.duplicated().sum())

# quitar espacios en blanco
df_fao.columns = df_fao.columns.str.strip()

# usar solo valores promedio
df_fao = df_fao.loc[df_fao['elemento'] == "promedio"]

"""## Preparar los datos para el análisis"""

# Nueva columna para año
df_fao['año'] = df_fao['encuesta'].str[-4:].astype(int)

# Nueva columna para país
df_fao['pais'] = df_fao['encuesta'].str.split(" - ").str[0]

df_fao.info()

# reindexar
df_fao.reset_index(drop=True, inplace=True)
df_fao.head(2)

"""# Análisis exploratorio"""

# describir las columnas incluso con string
df_fao.describe(include='object')

"""Filtrar y ordenar los datos para extraer información relevante

### Grupo de alimentos más consumidos a nivel mundial de 2010 a 2023
"""

# Grupos de alimentos más consumidos a nivel nacional
alimentos_nacional = df_fao[df_fao['nivel_geográfico'] == 'nacional']['grupo_de_alimentos'].value_counts().head(10)
print("Grupos de alimentos más consumidos a nivel nacional:")
print (alimentos_nacional)

# Grupos de alimentos más consumidos a nivel rural
alimentos_rural = df_fao[df_fao['nivel_geográfico'] == 'rural']['grupo_de_alimentos'].value_counts().head(10)
print("Grupos de alimentos más consumidos a nivel rural:")
print (alimentos_rural)

# Grupos de alimentos más consumidos a nivel urbano
alimentos_urbano = df_fao[df_fao['nivel_geográfico'] == 'urbano']['grupo_de_alimentos'].value_counts().head(10)
print("Grupos de alimentos más consumidos a nivel urbano:")
print (alimentos_urbano)

"""### Calcular el monto total de gasto en alimentos en los hogares a nivel país por quintiles."""

#filtar por quintiles

# quintil de ingreso más bajo
# quintil de ingreso 2
# quintil de ingreso 3
# quintil de ingreso 4
# quintil de ingreso más alto

#filtrar solo por quintiles y por mexico
datos_quintiles = df_fao[df_fao['nivel_geográfico'].str.contains('quintil')]
dq_mexico = datos_quintiles[datos_quintiles['pais'].str.contains('méxico')]
dq_mexico.sample(2)

# solo 2012
quintil_2012 = dq_mexico[(dq_mexico['año'] == 2012)]
total_2012 = quintil_2012.groupby('nivel_geográfico')['valor'].sum()
print(total_2012)

# 2023
quintil_2022 = dq_mexico[(dq_mexico['año'] == 2022)]
total_2022 = quintil_2022.groupby('nivel_geográfico')['valor'].sum()
print(total_2022)